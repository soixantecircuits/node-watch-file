{
  "name": "array-parallel",
  "description": "Call an array of asynchronous functions in parallel",
  "version": "0.1.1",
  "scripts": {
    "test": "node test"
  },
  "readme": "# Array Series [![Build Status](https://travis-ci.org/jonathanong/array-parallel.png)](https://travis-ci.org/jonathanong/array-parallel)\n\nCall an array of asynchronous functions in parallel\n\n### API\n\n#### parallel(fns[, context[, callback]])\n\n```js\nvar parallel = require('array-parallel')\n\nparallel([\n  function (done) {\n    done()\n  }\n], this, function (err) {\n\n})\n```\n\n#### fns\n\n`fns` is an array of functions to call in series.\nThe argument signature should be:\n\n```js\nfunction (done) {\n  done(new Error())\n  // or\n  done(null, result)\n}\n```\n\nThat is, each function should only take a `done` as an argument.\nEach callback should only take an `Error` as the first argument,\nor a value as the second.\n\n#### context\n\nOptional context to pass to each `fn`.\nBasically `fn.call(context, done)`.\n\n#### callback(err, results)\n\n```js\nfunction (err, results) {\n\n}\n```\n\nOnly argument is an `Error` argument.\nIt will be the first error retrieved from all the `fns`.\n`results` will be an array of results from each `fn`,\nthus this could be considered an asynchronous version of `[].map`.\n\n### License\n\nWTFPL",
  "readmeFilename": "README.md",
  "_id": "array-parallel@0.1.1",
  "dist": {
    "shasum": "c46ee81b37aea445cdeb716dd5c099fd0d25c5a4"
  },
  "_from": "array-parallel@~0.1.0",
  "_resolved": "https://registry.npmjs.org/array-parallel/-/array-parallel-0.1.1.tgz"
}
